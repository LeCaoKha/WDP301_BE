#!/usr/bin/env node

// Load environment variables as early as possible
require("dotenv").config({ override: true, quiet: true });

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("evdriver:server");
const http = require("http");
const connectDB = require("../config/database");
const {
  updateExpiredSubscriptions,
} = require("../utils/subscriptionScheduler");

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Connect to MongoDB then start server
 */
const startServer = async () => {
  try {
    await connectDB();
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
    console.log(`üöÄ Server running on port ${port}`);

    // Run initial check for expired subscriptions
    console.log("‚è∞ Checking for expired subscriptions...");
    await updateExpiredSubscriptions();

    // Schedule periodic checks (every hour)
    const checkInterval = 60 * 60 * 1000; // 1 hour in milliseconds
    setInterval(async () => {
      console.log("‚è∞ Scheduled check for expired subscriptions...");
      await updateExpiredSubscriptions();
    }, checkInterval);

    console.log(`‚è∞ Subscription expiry checker scheduled (runs every hour)`);
  } catch (error) {
    console.error("Failed to start server:", error);
    process.exit(1);
  }
};

startServer();

/**
 * Error handler
 */

function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Listening handler
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
