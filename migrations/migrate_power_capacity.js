/**
 * Migration Script: Move power_capacity from ChargingPoint to Station
 * 
 * M·ª•c ƒë√≠ch:
 * - Th√™m field power_capacity v√†o Station
 * - X√≥a field power_capacity t·ª´ ChargingPoint
 * 
 * C√°ch ch·∫°y:
 * 1. K·∫øt n·ªëi MongoDB
 * 2. node migrations/migrate_power_capacity.js
 */

const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const Station = require('../models/Station');
const ChargingPoint = require('../models/ChargingPoint');

// Database connection
const DB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/evdriver';

async function migratePowerCapacity() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await mongoose.connect(DB_URI);
    console.log('‚úÖ Connected to MongoDB\n');

    // ========== B∆Ø·ªöC 1: Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i ==========
    console.log('üìä B∆Ø·ªöC 1: Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i...');
    const stations = await Station.find();
    const chargingPoints = await ChargingPoint.find().populate('stationId');

    console.log(`   - T·ªïng s·ªë Station: ${stations.length}`);
    console.log(`   - T·ªïng s·ªë ChargingPoint: ${chargingPoints.length}`);

    // Ki·ªÉm tra station n√†o ch∆∞a c√≥ power_capacity
    const stationsWithoutPower = stations.filter(s => !s.power_capacity);
    console.log(`   - Station ch∆∞a c√≥ power_capacity: ${stationsWithoutPower.length}\n`);

    // ========== B∆Ø·ªöC 2: C·∫≠p nh·∫≠t Station ==========
    console.log('üîß B∆Ø·ªöC 2: C·∫≠p nh·∫≠t power_capacity cho Station...');
    
    if (stationsWithoutPower.length > 0) {
      // T·∫°o map: stationId -> avg power_capacity t·ª´ charging points c·ªßa n√≥
      const stationPowerMap = {};
      
      for (const cp of chargingPoints) {
        if (cp.power_capacity && cp.stationId) {
          const stationId = cp.stationId._id.toString();
          if (!stationPowerMap[stationId]) {
            stationPowerMap[stationId] = [];
          }
          stationPowerMap[stationId].push(cp.power_capacity);
        }
      }

      // C·∫≠p nh·∫≠t t·ª´ng station
      for (const station of stationsWithoutPower) {
        const stationId = station._id.toString();
        let powerCapacity = 50; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh

        // N·∫øu c√≥ charging points, l·∫•y gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t
        if (stationPowerMap[stationId] && stationPowerMap[stationId].length > 0) {
          const powers = stationPowerMap[stationId];
          // L·∫•y gi√° tr·ªã ƒë·∫ßu ti√™n (ho·∫∑c c√≥ th·ªÉ t√≠nh trung b√¨nh)
          powerCapacity = powers[0];
        }

        await Station.findByIdAndUpdate(station._id, {
          $set: { power_capacity: powerCapacity }
        });

        console.log(`   ‚úì Updated Station "${station.name}" v·ªõi power_capacity = ${powerCapacity} kW`);
      }
      console.log(`\n‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${stationsWithoutPower.length} stations\n`);
    } else {
      console.log('   ‚úì T·∫•t c·∫£ Station ƒë√£ c√≥ power_capacity\n');
    }

    // ========== B∆Ø·ªöC 3: X√≥a power_capacity t·ª´ ChargingPoint ==========
    console.log('üóëÔ∏è  B∆Ø·ªöC 3: X√≥a power_capacity t·ª´ ChargingPoint...');
    
    const cpWithPower = await ChargingPoint.countDocuments({ 
      power_capacity: { $exists: true } 
    });

    if (cpWithPower > 0) {
      const result = await ChargingPoint.updateMany(
        { power_capacity: { $exists: true } },
        { $unset: { power_capacity: "" } }
      );
      
      console.log(`   ‚úì ƒê√£ x√≥a power_capacity t·ª´ ${result.modifiedCount} charging points\n`);
    } else {
      console.log('   ‚úì ChargingPoint kh√¥ng c√≤n field power_capacity\n');
    }

    // ========== B∆Ø·ªöC 4: Ki·ªÉm tra k·∫øt qu·∫£ ==========
    console.log('üîç B∆Ø·ªöC 4: Ki·ªÉm tra k·∫øt qu·∫£ migration...');
    
    const finalStations = await Station.find();
    const finalChargingPoints = await ChargingPoint.find();

    const stationsWithPower = finalStations.filter(s => s.power_capacity);
    const cpStillHasPower = finalChargingPoints.filter(cp => cp.power_capacity);

    console.log('   üìã K·∫øt qu·∫£:');
    console.log(`   - Station c√≥ power_capacity: ${stationsWithPower.length}/${finalStations.length}`);
    console.log(`   - ChargingPoint c√≤n power_capacity: ${cpStillHasPower.length}/${finalChargingPoints.length}`);

    if (stationsWithPower.length === finalStations.length && cpStillHasPower.length === 0) {
      console.log('\n‚úÖ MIGRATION TH√ÄNH C√îNG!\n');
      
      // Hi·ªÉn th·ªã m·ªôt v√†i v√≠ d·ª•
      console.log('üìå V√≠ d·ª• Station sau migration:');
      const sampleStation = finalStations[0];
      console.log(`   - Name: ${sampleStation.name}`);
      console.log(`   - Power Capacity: ${sampleStation.power_capacity} kW`);
      console.log(`   - Connector Type: ${sampleStation.connector_type}\n`);
    } else {
      console.log('\n‚ö†Ô∏è  C√ì V·∫§N ƒê·ªÄ! Vui l√≤ng ki·ªÉm tra l·∫°i.\n');
    }

  } catch (error) {
    console.error('‚ùå Migration failed:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y migration
if (require.main === module) {
  migratePowerCapacity();
}

module.exports = migratePowerCapacity;
